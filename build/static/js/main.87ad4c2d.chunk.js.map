{"version":3,"sources":["pages/Welcome/index.js","components/Nav/index.js","pages/About/index.js","App.js","serviceWorker.js","index.js"],"names":["Welcome","state","redirect","setRedirect","setState","renderRedirect","to","Container","className","Row","Col","xs","size","offset","this","Button","outline","color","id","onClick","Component","NavbarComponent","Navbar","style","backgroundColor","light","expand","Nav","navbar","NavItem","NavLink","href","About","document","body","classList","add","remove","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wYAgDeA,G,iNA1CXC,MAAQ,CACJC,UAAU,G,EAGdC,YAAc,WACV,EAAKC,SAAS,CACVF,UAAU,K,EAGlBG,eAAiB,WACb,GAAI,EAAKJ,MAAMC,SACX,OAAO,kBAAC,IAAD,CAAUI,GAAG,Y,wEAKxB,OACI,kBAAEC,EAAA,EAAF,CAAYC,UAAU,WAClB,kBAACC,EAAA,EAAD,MACA,kBAACA,EAAA,EAAD,KACI,kBAAEC,EAAA,EAAF,CAAMC,GAAI,CAAEC,KAAM,EAAGC,OAAQ,GAAKL,UAAU,YAA5C,MACA,kBAACE,EAAA,EAAD,CAAKC,GAAG,OAAOH,UAAU,UAAS,2CAAmB,gDAAwB,uBAAGA,UAAU,gBAAe,8DACzG,kBAACE,EAAA,EAAD,CAAKC,GAAG,IAAIH,UAAU,YAAtB,MAEJ,kBAACC,EAAA,EAAD,CAAKD,UAAU,aACX,kBAACE,EAAA,EAAD,CAAKC,GAAI,CACLC,KAAM,OAAQC,OAAQ,IAErBC,KAAKT,iBACN,kBAACU,EAAA,EAAD,CAAQC,SAAO,EAACC,MAAM,YAAYC,GAAG,cAAcC,QAASL,KAAKX,aAAjE,yBACA,kBAACY,EAAA,EAAD,CAAQC,SAAO,EAACC,MAAM,aAAtB,wC,GA/BFG,c,wCCyBPC,E,iLApBP,OACI,6BACI,kBAACC,EAAA,EAAD,CAAQC,MAAO,CAAEC,gBAAiB,WAAaC,OAAK,EAACC,OAAO,MACxD,kBAACC,EAAA,EAAD,CAAKnB,UAAU,UAAUoB,QAAM,GAC3B,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAASC,KAAK,KAAd,aAEJ,kBAACF,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAASC,KAAK,UAAd,cAEJ,kBAACF,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAASC,KAAK,WAAd,mB,GAbEX,aCsBfY,E,4LAvBPC,SAASC,KAAKC,UAAUC,IAAI,sB,6CAI5BH,SAASC,KAAKC,UAAUE,OAAO,sB,+BAG/B,OACI,6BACI,kBAAC,EAAD,MACA,kBAAC9B,EAAA,EAAD,KACI,kBAACE,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKF,UAAU,WAAf,ygB,GAdJY,aCYLkB,MAXf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWzC,IACjC,kBAAC,IAAD,CAAOuC,OAAK,EAACC,KAAK,SAASC,UAAWT,OCC1BU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASf,SAASgB,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.87ad4c2d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Container, Row, Col, Button, } from 'reactstrap';\nimport './style.css';\nimport { Redirect } from 'react-router-dom';\n\nclass Welcome extends Component {\n    state = {\n        redirect: false\n    }\n\n    setRedirect = () => {\n        this.setState({\n            redirect: true\n        })\n    }\n    renderRedirect = () => {\n        if (this.state.redirect) {\n            return <Redirect to=\"/About\" />\n        }\n    }\n\n    render() {\n        return (\n            < Container className=\"welcome\" >\n                <Row></Row>\n                <Row>\n                    < Col xs={{ size: 2, offset: 1 }} className='firstCol' > &lt;</Col >\n                    <Col xs=\"auto\" className=\"secCol\"><p>Hello World!</p><p>Danelle Pontzious</p><p className=\"softwareLine\"><i>Full Stack Software Engineer </i></p></Col>\n                    <Col xs=\"2\" className=\"thirdCol\">&gt;</Col>\n                </Row>\n                <Row className=\"buttonRow\" >\n                    <Col xs={{\n                        size: \"auto\", offset: 2\n                    }} >\n                        {this.renderRedirect()}\n                        <Button outline color=\"secondary\" id=\"aboutButton\" onClick={this.setRedirect} >Learn More About Me-&gt;</Button>\n                        <Button outline color=\"secondary\">Learn Random Facts Instead -&gt;</Button>\n                    </Col>\n\n\n                </Row >\n\n            </Container >\n\n        )\n    }\n}\n\nexport default Welcome; ","import React, { Component } from 'react';\nimport {\n    Navbar,\n    Nav,\n    NavItem,\n    NavLink,\n} from 'reactstrap';\n\nclass NavbarComponent extends Component {\n    render() {\n        return (\n            <div>\n                <Navbar style={{ backgroundColor: \"#f5f5f5\" }} light expand=\"md\">\n                    <Nav className=\"ml-auto\" navbar>\n                        <NavItem>\n                            <NavLink href=\"/\">About Me</NavLink>\n                        </NavItem>\n                        <NavItem>\n                            <NavLink href=\"/About\">Portfolio</NavLink>\n                        </NavItem>\n                        <NavItem>\n                            <NavLink href=\"/events\">Contact</NavLink>\n                        </NavItem>\n                    </Nav>\n                </Navbar>\n            </div >\n        );\n    }\n}\n\nexport default NavbarComponent;","import React, { Component } from 'react';\nimport { Container, Row, Col } from 'reactstrap';\nimport './style.css';\nimport Nav from \"../../components/Nav/index\";\n\nclass About extends Component {\n    componentDidMount() {\n        document.body.classList.add(\"background-white\");\n    }\n\n    componentWillUnmount() {\n        document.body.classList.remove(\"background-white\");\n    }\n    render() {\n        return (\n            <div>\n                <Nav></Nav>\n                <Container>\n                    <Row>\n                        <Col className='aboutMe'>\n                            A highly motivated and creative optimist looking for the right team to continue learning and growing as a professional software developer. Graduated at the top of the class at the University of Arizonaâ€™s developer bootcamp in April, studying the languages, tools, concepts, and practices that make a full-stack developer. A quick learner and selfless teammate; proven to be a loyal and valuable resource with over ten years of experience managing and collaborating with people to deliver a better product.\n\n                    </Col>\n                    </Row>\n                </Container>\n\n            </div>\n        )\n    }\n}\nexport default About;","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport './App.css';\nimport Welcome from './pages/Welcome/index';\nimport About from './pages/About/index';\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\" component={Welcome} />\n        <Route exact path=\"/About\" component={About} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}